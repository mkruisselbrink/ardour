#!/usr/bin/env python
from waflib.extras import autowaf as autowaf
from waflib import Options
import os

# Mandatory variables
top = '.'
out = 'build'

# Version of this package (even if built as a child)
MAJOR = '0'
MINOR = '0'
MICRO = '0'
SMUFL_VERSION = "%s.%s.%s" % (MAJOR, MINOR, MICRO)

# Library version (UNIX style major, minor, micro)
# major increment <=> incompatible changes
# minor increment <=> compatible changes (additions)
# micro increment <=> no interface changes
SMUFL_LIB_VERSION = '0.0.0'

# Variables for 'waf dist'
APPNAME = 'smufl'
VERSION = SMUFL_VERSION
I18N_PACKAGE = 'libsmufl'

smufl_sources = [
    'clefs.cc',
    'font_data.cc',
    'glyph.cc',
]

def options(opt):
    autowaf.set_options(opt)

def configure(conf):
    pass

def build(bld):
    # Library
    if bld.is_defined ('INTERNAL_SHARED_LIBS'):
        obj = bld.shlib(features = 'cxx cxxshlib', source=smufl_sources)
        obj.defines = [ 'LIBSMUFL_DLL_EXPORTS=1' ]
    else:
        obj = bld.stlib(features = 'cxx cxxstlib', source=smufl_sources)
        obj.cxxflags = [ bld.env['compiler_flags_dict']['pic'] ]
        obj.cflags   = [ bld.env['compiler_flags_dict']['pic'] ]
        obj.defines  = []
    
    obj.export_includes = ['.']
    obj.includes     = ['.']
    obj.name         = 'libsmufl'
    obj.target       = 'smufl'
    obj.vnum         = SMUFL_LIB_VERSION
    obj.install_path = bld.env['LIBDIR']
    obj.defines     += [ 'PACKAGE="' + I18N_PACKAGE + '"' ]
    obj.uselib       = [ 'BOOST', 'GLIBMM' ]
    obj.use          = [ 'libpbd' ]

    bld.install_files(bld.env['DATADIR'], 'fonts/Leland/Leland.otf')
    bld.install_files(bld.env['DATADIR'], 'fonts/Leland/leland_metadata.json')

    if bld.env['BUILD_TESTS'] and bld.is_defined('HAVE_CPPUNIT'):
        # Static library (for unit test code coverage)
        obj = bld(features = 'cxx cstlib')
        obj.source         = smufl_sources
        obj.export_includes = ['.']
        obj.includes       = ['.']
        obj.name           = 'libsmufl_static'
        obj.target         = 'smufl_static'
        obj.uselib         = [ 'BOOST', 'GLIBMM' ]
        obj.use            = 'libpbd'
        obj.vnum           = SMUFL_LIB_VERSION
        obj.install_path   = ''
        if bld.env['TEST_COVERAGE']:
             obj.linkflags      = ['--coverage']
             obj.cflags         = ['--coverage']
             obj.cxxflags       = ['--coverage']
        obj.defines        = ['PACKAGE="libsmufl"']

        # Unit tests
        obj              = bld(features = 'cxx cxxprogram')
        obj.source       = [
                'test/clefs_test.cc',
                'test/testrunner.cc',
                ]
        obj.includes     = ['.']
        obj.use          = 'libsmufl_static'
        obj.uselib       = ['GLIBMM',  'CPPUNIT']
        obj.target       = 'run-tests'
        obj.name         = 'libsmufl-tests'
        obj.install_path = ''
        obj.defines      = ['PACKAGE="libsmufltest"']
        if bld.env['TEST_COVERAGE']:
            obj.linkflags      = ['--coverage']
            obj.cflags         = ['--coverage']
            obj.cxxflags       = ['--coverage']
        if bld.is_defined('NEED_INTL'):
            obj.linkflags = ' -lintl'

def test(ctx):
    pass

def shutdown():
    autowaf.shutdown()
